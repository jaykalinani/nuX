# Schedule definitions for thorn nuX_M1

###############################################################################
# Storage
###############################################################################
STORAGE: rN
STORAGE: rE
STORAGE: rF
STORAGE: rP

STORAGE: rnnu
STORAGE: rJ
STORAGE: rHt
STORAGE: rH

STORAGE: radial_fluxes
STORAGE: neutrino_fractions

STORAGE: opacs
STORAGE: nueave
STORAGE: fluidsources
STORAGE: fidu_vel
STORAGE: fidu_w_lorentz

STORAGE: chi

STORAGE: rN_rhs
STORAGE: rE_rhs
STORAGE: rF_rhs

STORAGE: nuX_m1_mask

STORAGE: TimeIntegratorStage

###############################################################################
# Initialization
###############################################################################
SCHEDULE nuX_M1_Init AT CCTK_STARTUP
{
    LANG: C
    OPTIONS: GLOBAL
} "Register banner"

SCHEDULE nuX_M1_ParamCheck AT CCTK_PARAMCHECK
{
    LANG: C
    OPTIONS: GLOBAL
} "Check parameters"

SCHEDULE nuX_M1_Reset AT CCTK_INITIAL \
    BEFORE (nuX_M1_InitialData ReadInterpolate_ReadData)
{
    LANG: C

    WRITES: rN(everywhere) rF(everywhere) nuX_m1_mask(everywhere)
} "Initialize everything to zero"

SCHEDULE nuX_M1_FiducialVelocity AT CCTK_INITIAL AFTER HydroBase_Prim2ConInitial
{
    LANG: C
    READS: ADMBaseX::metric(everywhere)
    READS: AsterX::dens(everywhere)
    READS: HydroBaseX::vel(everywhere)


    WRITES: fidu_velx(everywhere) fidu_vely(everywhere) fidu_velz(everywhere)
    WRITES: fidu_w_lorentz(everywhere)
} "Compute the fiducial velocity"

SCHEDULE GROUP nuX_M1_InitialData AT CCTK_INITIAL \
    AFTER (ADMBase_InitialData ADMBase_InitialGauge HydroBase_Initial nuX_M1_FiducialVelocity) \
    BEFORE (ADMBase_PostInitial SetTmunu)
{
} "M1 initial data group"

SCHEDULE nuX_M1_InitVolform AT CCTK_INITIAL AFTER (nuX_M1_InitialData) \
    BEFORE (nuX_M1_CalcClosure)
{
    LANG: C
    READS: ADMBaseX::metric(everywhere)
    WRITES: volform(everywhere)
} "Compute the volume form"

SCHEDULE nuX_M1_CalcClosure AT CCTK_INITIAL \
    AFTER (nuX_M1_InitialData nuX_M1_FiducialVelocity nuX_M1_SetToEquilibrium)
{
    LANG: C

    READS: ADMBaseX::metric(everywhere)
    READS: ADMBaseX::lapse(everywhere)
    READS: ADMBaseX::shift(everywhere)
    READS: ADMBaseX::curv(everywhere)
    READS: fidu_vel(everywhere) nuX_m1_mask(everywhere) 
    READS: fidu_w_lorentz(everywhere)
    READS: rP(everywhere) rF(everywhere) rJ(everywhere) rHt(everywhere) rH(everywhere) rnnu(everywhere)
    WRITES: rP(everywhere) rJ(everywhere) rHt(everywhere) rH(everywhere) rnnu(everywhere)
    WRITES: chi(everywhere)
} "Compute the M1 closure everywhere on the grid"

if (copy_levels) {
    SCHEDULE nuX_M1_CopyLevels AT CCTK_INITIAL \
        AFTER (nuX_M1_InitialData nuX_M1_SetToEquilibrium)
    {
        LANG: C
        READS: rN(interior) rE(interior) rF(interior)
        WRITES: rN_p(interior) rE_p(interior) rF_p(interior)
        SYNC: rN_p rE_p rF_p
    } "Copy data to past timelevels"
}

###############################################################################
# Initial data
###############################################################################

#if (set_to_equilibrium) {
#    SCHEDULE nuX_M1_SetToEquilibrium AT CCTK_INITIAL \
#        BEFORE (ADMBase_PostInitial SetTmunu)
#    {
#        LANG: C
#    } "Set radiation quantities to equilibrium"
#}

if (reset_to_equilibrium) {
    SCHEDULE nuX_M1_Reset AT CCTK_POST_RECOVER_VARIABLES
    {
        LANG: C
        WRITES: rN(everywhere) rE(everywhere) rF(everywhere) nuX_m1_mask(everywhere)
    } "Initialize everything to zero"

    SCHEDULE nuX_M1_FiducialVelocity AT CCTK_POST_RECOVER_VARIABLES \
        AFTER nuX_M1_Reset
    {
        LANG: C
         READS: ADMBaseX::metric(everywhere)
         READS: AsterX::dens(everywhere)
         READS: HydroBaseX::vel(everywhere)

         WRITES: fidu_velx(everywhere) fidu_vely(everywhere) fidu_velz(everywhere)
         WRITES: fidu_w_lorentz(everywhere)
    } "Compute the fiducial velocity"

#    SCHEDULE nuX_M1_SetToEquilibrium AT CCTK_POST_RECOVER_VARIABLES \
#        AFTER (nuX_M1_Reset nuX_M1_FiducialVelocity)
#    {
#        LANG: C
#    } "Set radiation quantities to equilibrium"

    if (copy_levels) {
        SCHEDULE nuX_M1_CopyLevels AT CCTK_POST_RECOVER_VARIABLES \
            AFTER nuX_M1_SetToEquilibrium
        {
            LANG: C
            READS: rN(everywhere) rE(everywhere) rF(everywhere)
            WRITES: rN_p(everywhere) rE_p(everywhere) rF_p(everywhere)
        } "Copy data to past timelevels"
    }
}

###############################################################################
# Main loop
###############################################################################
SCHEDULE nuX_M1_InitialCopy AT CCTK_EVOL \
    BEFORE (MoL_Evolution nuX_M1_WRAP)
{
    LANG: C
    READS: rN_p(interior) rE_p(interior) rF_p(interior)
    WRITES: rN(interior) rE(interior) rF(interior)
    SYNC: rN rE rF
} "Copy the data from the previous time-level to the current one"

SCHEDULE GROUP nuX_M1_WRAP AT CCTK_EVOL \
    AFTER (MoL_Evolution MoL_PseudoEvolution MoL_PostStep nuX_M1_InitialCopy)
{
} "This group wrapps all nuX_M1 updates"

SCHEDULE GROUP nuX_M1_EVOL IN nuX_M1_WRAP
{
} "Radiation updates go here"

#SCHEDULE nuX_M1_InitTimeIntegrator IN nuX_M1_EVOL
#{
#    LANG: C
#    OPTIONS: LEVEL
#} "Set the time integrator index"

SCHEDULE nuX_M1_SetMask IN nuX_M1_EVOL
{
    LANG: C
    WRITES: nuX_m1_mask(everywhere)
} "Excise regions of the domain"

#SCHEDULE nuX_M1_FinalizeTimeIntegrator IN nuX_M1_EVOL \
#    AFTER nuX_M1_TimeStep
#{
#    LANG: C
#    OPTIONS: LEVEL
#} "Clenups after the time integration"

#------------------------------------------------------------------------------
SCHEDULE GROUP nuX_M1_TimeStep IN nuX_M1_EVOL \
    WHILE nuX_M1::TimeIntegratorStage \
    AFTER (nuX_M1_InitTimeIntegrator nuX_M1_SetMask)
{
} "A single substep in the evolution"
#------------------------------------------------------------------------------

SCHEDULE nuX_M1_InitRHS IN nuX_M1_TimeStep
{
    LANG: C
    WRITES: rN_rhs(interior) rE_rhs(interior) rF_rhs(interior) 
    SYNC: rN_rhs rE_rhs rF_rhs
} "Initialize explicit RHSs to zero"

SCHEDULE nuX_M1_FiducialVelocity IN nuX_M1_TimeStep
{
    LANG: C
    READS: ADMBaseX::metric(everywhere)
    READS: AsterX::dens(everywhere)
    READS: HydroBaseX::vel(everywhere) 
    WRITES: fidu_velx(everywhere) fidu_vely(everywhere) fidu_velz(everywhere)
    WRITES: fidu_w_lorentz(everywhere)
    
} "Compute the fiducial velocity"

SCHEDULE nuX_M1_CalcClosure IN nuX_M1_TimeStep AFTER nuX_M1_FiducialVelocity
{
    LANG: C
 
    READS: ADMBaseX::metric(everywhere)
    READS: ADMBaseX::lapse(everywhere)
    READS: ADMBaseX::shift(everywhere)
    READS: ADMBaseX::curv(everywhere)
    READS: fidu_vel(everywhere) nuX_m1_mask(everywhere) 
    READS: fidu_w_lorentz(everywhere)
    READS: rP(everywhere) rF(everywhere) rJ(everywhere) rHt(everywhere) rH(everywhere) rnnu(everywhere)
    WRITES: rP(everywhere) rJ(everywhere) rHt(everywhere) rH(everywhere) rnnu(everywhere)
    WRITES: chi(everywhere)
} "Compute the M1 closure everywhere on the grid"

#SCHEDULE nuX_M1_CalcOpacity IN nuX_M1_TimeStep AFTER nuX_M1_CalcClosure
#{
#    LANG: C
#} "Compute the opacities"

if (include_fluxes) {
    SCHEDULE nuX_M1_CalcFluxes IN nuX_M1_TimeStep \
        AFTER (nuX_M1_CalcOpacity nuX_M1_CalcClosure nuX_M1_InitRHS)
    {
        LANG: C
        READS: ADMBaseX::metric(interior)
        READS: ADMBaseX::lapse(interior)
        READS: ADMBaseX::shift(interior)
        READS: ADMBaseX::curv(interior)
        READS: rN(interior) rE(interior) rF(interior)
        READS: fidu_vel(interior) nuX_m1_mask(interior)
        READS: rHt(interior) rH(interior)
        READS: rP(interior) rJ(interior)
        READS: volform(interior)
        READS: fidu_w_lorentz(interior)
        READS: nu_flux_x(interior) nu_flux_y(interior) nu_flux_z(interior)
        READS: opacs(interior)
        WRITES: nu_flux_x(interior) nu_flux_y(interior) nu_flux_z(interior)
        SYNC: nu_flux_x nu_flux_y nu_flux_z rHt rH rP rJ fidu_w_lorentz
    } "Compute the radiation fluxes and add them the RHS"

   SCHEDULE nuX_M1_UpdateRHSFromFluxes IN nuX_M1_TimeStep \
        AFTER (nuX_M1_CalcFluxes nuX_M1_CalcOpacity nuX_M1_CalcClosure nuX_M1_InitRHS)
    {
        LANG: C
        READS: rN(interior) rE(interior) rF(interior)
        READS: nu_flux_x(interior) nu_flux_y(interior) nu_flux_z(interior)
        READS: opacs(interior)
        READS: nuX_m1_mask(interior)
        WRITES: rN_rhs(interior) rE_rhs(interior) rF_rhs(interior)
        SYNC: rN_rhs rE_rhs rF_rhs 
    } "Compute the radiation fluxes and add them the RHS"


}

if (include_GR_sources) {
    SCHEDULE nuX_M1_CalcGRSources IN nuX_M1_TimeStep \
        AFTER (nuX_M1_CalcClosure nuX_M1_InitRHS)
        BEFORE nuX_M1_CalcUpdate
    {
        LANG: C
        
        READS: ADMBaseX::metric(everywhere) ADMBaseX::curv(everywhere) ADMBaseX::lapse(everywhere) ADMBaseX::shift(everywhere)
        READS: rE(everywhere) rF(everywhere) rP(everywhere)
        READS: volform(everywhere) nuX_m1_mask(everywhere)
        WRITES: rF_rhs(everywhere) rE_rhs(everywhere)
    } "Compute the radiation GR sources and add them to the RHS"
}

#SCHEDULE nuX_M1_CalcUpdate IN nuX_M1_TimeStep \
#    AFTER (nuX_M1_CalcOpacity nuX_M1_CalcFluxes)
#{
#    LANG: C
#} "Semi-implicit update of radiation and matter fields"

if (backreact) {
    SCHEDULE GROUP HydroBase_Boundaries IN nuX_M1_WRAP AFTER nuX_M1_EVOL
    {
    } "Apply BCs and synchronize hydro variables"

    SCHEDULE GROUP HydroBase_Con2Prim IN nuX_M1_WRAP AFTER HydroBase_Boundaries
    {
        LANG: C
    } "Computes the primitives from the conservatives"
}

# -----------------------------------------------------------------------------
#if (optimize_prolongation) {
#    SCHEDULE nuX_M1_ControlProlongation in nuX_M1_TimeStep BEFORE nuX_M1_BoundaryConditions AFTER nuX_M1_CalcUpdate
#    {
#        LANG: C
#        OPTIONS: level
#    } "enable / disable prolongation during RK steps"
#}

SCHEDULE GROUP nuX_M1_BoundaryConditions IN nuX_M1_TimeStep \
    AFTER nuX_M1_CalcUpdate
{
} "Apply boundary conditions during the evolution"
# -----------------------------------------------------------------------------

SCHEDULE GROUP ApplyBCs AS nuX_M1_ApplyBCs IN nuX_M1_BoundaryConditions \
    AFTER nuX_M1_SelectBC
{
} "Apply boundary conditions"

if (add_to_Tmunu) {
    SCHEDULE GROUP nuX_M1_Tmunu IN AddToTmunu
    {
    } "Adds the contribution of radiation to the global stress-energy tensor"

    SCHEDULE nuX_M1_FiducialVelocity IN nuX_M1_Tmunu BEFORE nuX_M1_AddToTmunu
    {
        LANG: C
        READS: ADMBaseX::metric(everywhere)
        READS: AsterX::dens(everywhere)
        READS: HydroBaseX::vel(everywhere)  
        READS: nuX_m1_mask(everywhere)
        WRITES: fidu_velx(everywhere) fidu_vely(everywhere) fidu_velz(everywhere)
        WRITES: fidu_w_lorentz(everywhere)
    } "Compute the fiducial velocity"

    SCHEDULE nuX_M1_AddToTmunu IN nuX_M1_Tmunu
    {
        LANG: C
        READS: nuX_m1_mask(everywhere)
        READS: ADMBaseX::metric(everywhere) ADMBaseX::lapse(everywhere) ADMBaseX::shift(everywhere) ADMBaseX::curv(everywhere)
        READS: fidu_w_lorentz(everywhere) fidu_vel(everywhere)
        READS: volform(everywhere) rE(everywhere) rF(everywhere) 
        READS: ADMBaseX::shift(everywhere)
        READS: TmunuBaseX::eTtt(everywhere) TmunuBaseX::eTti(everywhere) TmunuBaseX::eTij(everywhere)
        WRITES: TmunuBaseX::eTtt(everywhere) TmunuBaseX::eTti(everywhere) TmunuBaseX::eTij(everywhere)
        SYNC: TmunuBaseX::eTtt TmunuBaseX::eTti TmunuBaseX::eTij
    } "Adds the contribution of radiation to the global stress-energy tensor"
}

###############################################################################
# Stuff outside of the main loop
###############################################################################
# This group is basically the equivalent of MoL_PostStep
SCHEDULE GROUP nuX_M1_PostStep AT PostInitial BEFORE MoL_PostStep
{
} "Poststep operations"

SCHEDULE GROUP nuX_M1_PostStep AT PostRegrid BEFORE MoL_PostStep
{
} "Poststep operations"

SCHEDULE GROUP nuX_M1_PostStep AT PostRegridInitial BEFORE MoL_PostStep
{
} "Poststep operations"

SCHEDULE GROUP nuX_M1_PostStep AT PostRestrict BEFORE MoL_PostStep
{
} "Poststep operations"

SCHEDULE GROUP nuX_M1_PostStep AT Post_Recover_Variables BEFORE MoL_PostStep
{
} "Poststep operations"

SCHEDULE GROUP nuX_M1_BoundaryConditions IN nuX_M1_PostStep BEFORE MoL_PostStep
{
} "Apply the boundary conditions"

SCHEDULE nuX_M1_CalcClosure AT CCTK_ANALYSIS
{
    LANG: C

    READS: ADMBaseX::metric(everywhere)
    READS: ADMBaseX::lapse(everywhere)
    READS: ADMBaseX::shift(everywhere)
    READS: ADMBaseX::curv(everywhere)
    READS: fidu_vel(everywhere) nuX_m1_mask(everywhere) 
    READS: fidu_w_lorentz(everywhere)
    READS: rE(everywhere) rN(everywhere) volform(everywhere)
    READS: rP(everywhere) rF(everywhere) rJ(everywhere) rHt(everywhere) rH(everywhere) rnnu(everywhere)
    WRITES: rP(everywhere) rJ(everywhere) rHt(everywhere) rH(everywhere) rnnu(everywhere)
    WRITES: chi(everywhere)
} "Compute the M1 closure everywhere on the grid"

SCHEDULE nuX_M1_Analysis AT CCTK_ANALYSIS AFTER nuX_M1_CalcClosure
{
    LANG: C
    TRIGGERS: neutrino_fractions
    READS: HydroBaseX::rho(everywhere) HydroBaseX::eps(everywhere)
    READS: volform(everywhere)
    READS: rnnu(everywhere) rJ(everywhere)
    WRITES: ynue(everywhere) ynua(everywhere) ynux(everywhere)
    WRITES: znue(everywhere) znua(everywhere) znux(everywhere)
} "Computes M1 analysis quantities"

SCHEDULE nuX_M1_CalcRadialFluxes AT CCTK_ANALYSIS \
             AFTER nuX_M1_CalcClosure \
             BEFORE outflow
{
    LANG: C
    READS: ADMBaseX::metric(everywhere) ADMBaseX::shift(everywhere) ADMBaseX::lapse(everywhere)
    READS: ADMBaseX::curv(everywhere) volform(everywhere)
    READS: rHt(everywhere) rH(everywhere) rE(everywhere) rJ(everywhere) rN(everywhere) rF(everywhere)
    READS: fidu_vel(everywhere) fidu_w_lorentz(everywhere)
    READS: nuX_m1_mask(everywhere)
    WRITES: radial_fluxes(everywhere)
} "Compute radial fluxes"


# This would need to change if we want to couple with another hydro solver
# if (!CCTK_Equals(evolution_method, "nuXode")) {
#    SCHEDULE nuX_M1_MoLRegister IN MoL_Register
#    {
#        LANG: C
#        OPTIONS: GLOBAL
#    } "Register variables with MoL"
#  }