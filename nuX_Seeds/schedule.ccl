#Schedule definitions for thorn AsterSeeds

#Initial conditions for setting atmosphere test

#if (CCTK_Equals(test_type, "Atmosphere")) {
#
#  SCHEDULE Atmosphere_Initialize IN HydroBaseX_InitialData AFTER HydroBaseX_initial_data {
#  LANG: C
#  WRITES: HydroBaseX::rho(everywhere) HydroBaseX::vel(everywhere) HydroBaseX::eps(everywhere) HydroBaseX::press(everywhere)
#  WRITES: AsterX::Avec_x(everywhere) AsterX::Avec_y(everywhere) AsterX::Avec_z(everywhere)
#  }
#  "Set up initial conditions for atmosphere"
#}


if (CCTK_Equals(nuX_test_case, "adv_velocity_jump")) {
  SCHEDULE nuX_Seeds_SetupTest_adv_velocity_jump IN HydroBaseX_InitialData AFTER HydroBaseX_initial_data {
    LANG: C
    READS: ADMBaseX::metric(everywhere)
    WRITES: HydroBaseX::vel(everywhere) HydroBaseX::rho(everywhere) HydroBaseX::eps(everywhere) HydroBaseX::press(everywhere)
    WRITES: HydroBaseX::Ye(everywhere)
    WRITES: nuX_M1::rN(everywhere) nuX_M1::rE(everywhere) nuX_M1::rF(everywhere)
  } "Setup advective step initial conditions."
}

if ((CCTK_Equals(nuX_test_case, "diff_limit_square")) || (CCTK_EQUALS(nuX_test_case, "diff_limit_gaussian"))) {
  SCHEDULE nuX_Seeds_SetupTest_diff_limit_test IN HydroBaseX_InitialData AFTER HydroBaseX_initial_data {
    LANG: C
    WRITES: HydroBaseX::vel(everywhere) HydroBaseX::rho(everywhere) HydroBaseX::eps(everywhere) HydroBaseX::press(everywhere)
    WRITES: HydroBaseX::Ye(everywhere)
    WRITES: nuX_M1::rN(everywhere) nuX_M1::rE(everywhere) nuX_M1::rF(everywhere)
  } "Setup diffusion limit test."
}


if (CCTK_Equals(nuX_test_case, "shadow")) {
  SCHEDULE nuX_Seeds_SetupTest_shadow IN HydroBaseX_InitialData AFTER HydroBaseX_initial_data {
    LANG: C
    WRITES: HydroBaseX::vel(everywhere) HydroBaseX::rho(everywhere) HydroBaseX::eps(everywhere) HydroBaseX::press(everywhere)
    WRITES: HydroBaseX::Ye(everywhere)
    WRITES: nuX_M1::rN(everywhere) nuX_M1::rE(everywhere) nuX_M1::rF(everywhere)
  } "Setup shadow initial conditions."
}



###############################################################################
# Tests
###############################################################################


#if (CCTK_Equals(nuX_m1_test, "beam")) {
#    SCHEDULE nuX_M1_SetupTest_beam IN nuX_M1_InitialData
#    {
#        LANG: C
#        WRITES: rN(everywhere) rE(everywhere) rF(everywhere)
#    } "Setup initial data for beam test"
#}
#
#if (CCTK_Equals(nuX_m1_test, "diff")) {
#    SCHEDULE nuX_M1_SetupTest_diff IN nuX_M1_InitialData
#    {
#        LANG: C
#        READS: rE(everywhere) fidu_w_lorentz(everywhere) fidu_vel(everywhere)
#        WRITES: rN(everywhere) rE(everywhere) rF(everywhere)
#    } "Setup initial data for diff test"
#}
#
#if (CCTK_Equals(nuX_m1_test, "equil")) {
#    SCHEDULE nuX_M1_SetupTest_equil IN nuX_M1_InitialData
#    {
#        LANG: C
#        READS: fidu_w_lorentz(everywhere) fidu_vel(everywhere) 
#        WRITES: rN(everywhere) rE(everywhere) rF(everywhere)
#
#   #    SCHEDULE nuX_ConsToAll IN HydroBase_Con2Prim
#   # {
#   #     LANG: C
#   # } "Computes the primitives from the conservatives"
#   } "Setup initial data for equil test"
#}
#
#if ((CCTK_Equals(nuX_m1_test, "kerrschild")) || (CCTK_Equals(nuX_m1_test, "sphere")) || (CCTK_Equals(nuX_m1_test, "shadow"))) {
#    SCHEDULE nuX_M1_SetupTest_kss IN nuX_M1_InitialData
#    {
#        LANG: C
#        WRITES: rN(everywhere) rE(everywhere) rF(everywhere)
#    } "Setup initial data to vacuum for KS, Spherical, Shadow data"
#}
#
#if (CCTK_Equals(nuX_m1_test, "kerrschild")) {
#    SCHEDULE nuX_M1_KerrBCs IN nuX_M1_BoundaryConditions \
#        AFTER nuX_M1_ApplyBCs
#    {
#        LANG: C
#    } "Apply custom boundary conditions"
#
#     SCHEDULE nuX_M1_KerrSchild_Mask IN nuX_M1_EVOL \
#         AFTER nuX_M1_SetMask \
#         BEFORE nuX_M1_TimeStep
#     {
#         LANG: C
#         WRITES: nuX_m1_mask(everywhere)
#         WRITES: rN(everywhere) rE(everywhere) rF(everywhere)
#     } "Cheap excision for the Kerr Schild test"
# }
#
#if (CCTK_Equals(nuX_m1_test, "shadow")) {
#    SCHEDULE nuX_M1_ShadowBCs IN nuX_M1_BoundaryConditions \
#        AFTER nuX_M1_ApplyBCs
#    {
#        LANG: C
#    } "Apply custom boundary conditions"
#}